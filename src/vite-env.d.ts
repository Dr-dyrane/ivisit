/// <reference types="vite/client" />
// vite-env.d.ts

/**
 * iVisit Application Data Models
 * This file defines the TypeScript interfaces for the iVisit application's data models.
 * These interfaces are designed to be used with a Supabase database, but can be adapted to other databases as needed.
 */

/**
 * Represents a user in the iVisit system.
 */
interface User {
	/** Unique identifier for the user. Automatically generated by Supabase. */
	id: string;
	/** User's full name. */
	name: string;
	/** User's email address. */
	email: string;
	/** User's phone number. Optional, but recommended. */
	phoneNumber?: string;
	/** User's current location (latitude and longitude). */
	location: {
		latitude: number | L.LatLng;
		longitude: number | L.LatLng;
	};
	/** Information about authentication providers used by the user. */
	authenticationProviders: {
		google?: string; // Google ID, if authenticated with Google
		apple?: string; // Apple ID, if authenticated with Apple
		custom?: string; // Custom ID if using your own auth system
	};
	/** Array of emergency contact details for the user. */
	emergencyContacts: EmergencyContact[];
}

/**
 * Represents an emergency contact for a user.
 */
interface EmergencyContact {
	/** Name of the emergency contact. */
	name: string;
	/** Phone number of the emergency contact. */
	phoneNumber: string;
	/** Relationship of the emergency contact to the user. */
	relationship: string;
}

/**
 * Represents a hospital in the iVisit system.
 */
interface Hospital {
	/** Unique identifier for the hospital. */
	id: string;
	/** Name of the hospital. */
	name: string;
	/** Full address of the hospital. */
	address?: string;
	/** Location of the hospital (latitude and longitude). */
	location?: {
		latitude: number;
		longitude: number;
	};
	/** Phone number of the hospital. */
	phoneNumber?: string;
	/** Array of medical specialties offered by the hospital. */
	specialties: string[];
	/** Rating of the hospital (e.g., star rating). */
	rating: number;
	/** Number of available beds for each specialty. */
	availableBeds: number | { [specialty: string]: number } | ReactNode;
	/** Average wait time (optional) */
	waitTime?: string; // Added optional waitTime property
	/** Number of ambulances available at the hospital. */
	distance?: string;
	eta?: string | undefined;
	ambulances?: number;
	/** Tier of the hospital (Premium or Standard). */
	type?: "Premium" | "Standard" | undefined;
	/** Pricing for each specialty. */
	price?: { [specialty: string]: number } | string | ReactNode;
	/** URL to an image of the hospital. */
	image: string;
}

/**
 * Represents an ambulance in the iVisit system.
 */
interface Ambulance {
	/** Unique identifier for the ambulance. */
	id: string;
	/** ID of the hospital this ambulance belongs to. */
	hospitalId: string;
	/** Current location of the ambulance (latitude and longitude). */
	location: {
		latitude: number;
		longitude: number;
	};
	/** Current status of the ambulance. */
	status: "available" | "enroute" | "unavailable";
	/** Information about the ambulance driver. */
	driver: {
		name: string;
		phoneNumber: string;
	};
}

/**
 * Represents a booking made by a user for a service.
 */
interface Booking {
	/** Unique identifier for the booking. */
	id: string;
	/** ID of the user who made the booking. */
	userId: string;
	/** ID of the hospital involved in the booking. */
	hospitalId: string;
	/** Specialty of the medical service booked. */
	specialty: string;
	/** Type of service booked (ambulance or bed). */
	serviceType: "ambulance" | "bed";
	/** ID of the ambulance involved (if applicable). */
	ambulanceId?: string;
	/** ID of the bed booked (if applicable). */
	bedId?: string;
	/** Status of the booking. */
	status: "pending" | "accepted" | "inProgress" | "completed" | "cancelled";
	/** Time the booking was made. */
	bookingTime: Date;
	/** Estimated arrival time (for ambulance bookings). */
	estimatedArrivalTime?: Date;
	/** Actual arrival time (for both ambulance and bed bookings). */
	arrivalTime?: Date;
	/** Price of the booking. */
	price: number;
}

/**
 * Represents a hospital bed.
 */
interface Bed {
	/** Unique identifier for the bed. */
	id: string;
	/** ID of the hospital where the bed is located. */
	hospitalId: string;
	/** Specialty of the bed. */
	specialty: string;
	/** Number of the bed. */
	bedNumber: string;
	/** Indicates if the bed is currently available. */
	available: boolean;
}

// --- UI Component Interfaces (Examples -  Adapt as needed for your components) ---

interface HospitalListProps {
	hospitals: Hospital[];
	selectedSpecialty: string;
	selectedHospital: string | null;
	onHospitalSelect: (id: string) => void;
	onBookBed: (id: string) => void;
}

// --- UI Component Interfaces ---

/** Props for a component displaying a list of hospitals. */
interface HospitalListProps {
	/** Array of Hospital objects to display. */
	hospitals: Hospital[];
	/** Currently selected specialty filter. */
	selectedSpecialty: string;
	/** ID of the currently selected hospital (or null if none selected). */
	selectedHospital: string | null;
	/** Callback function to handle hospital selection. */
	onHospitalSelect: (hospitalId: string) => void;
	/** Callback function to handle booking a bed at a selected hospital. */
	onBookBed: (hospitalId: string) => void;
	/** Function to fetch hospitals (e.g. with pagination or filtering) */
	fetchHospitals?: (specialty: string, page?: number) => Promise<Hospital[]>;
	/** Loading state indicator. */
	isLoading: boolean;
	/** Error state indicator. */
	error?: string;
}

/** Props for a component allowing users to select a medical specialty. */
interface SpecialtySelectorProps {
	/** Array of available specialties. */
	specialties: string[];
	/** Currently selected specialty. */
	selectedSpecialty: string;
	/** Callback function to handle specialty selection. */
	onSelect: (specialty: string) => void;
}

/** Props for a component displaying information about a single hospital. */
interface HospitalCardProps {
	/** Hospital data. */
	hospital: Hospital;
	/** Indicates if the hospital is currently selected. */
	isSelected: boolean;
	/** Callback function to handle selecting the hospital. */
	onSelect: (hospitalId: string) => void;
	/** Callback function to initiate a call to the hospital. */
	onCall: (hospitalId: string) => void;
	/** Callback to handle booking an ambulance */
	onBookAmbulance?: (hospitalId: string) => void;
}

/** Props for a component displaying a panel to manage bookings. */
interface BookingPanelProps {
	/** Animation properties for smooth transitions. */
	fadeIn: any; //  Replace 'any' with a specific animation type if using a library like React Spring.
	/** Currently selected specialty. */
	selectedSpecialty: string;
	/** ID of the currently selected hospital. */
	selectedHospital: string | null;
	/** Callback function to handle specialty selection. */
	onSpecialtySelect: (specialty: string) => void;
	/** Callback function to handle hospital selection. */
	onHospitalSelect: (hospitalId: string) => void;
	/** Callback function to handle booking a bed. */
	onBookBed: (hospitalId: string) => void;
	/** Bookings array for the current user */
	// bookings: Booking[];
	/** Callback to update bookings */
	// updateBookings: (newBookings: Booking[]) => void;
}

/** Props for a component to select the type of service (Premium or Standard). */
interface ServiceTypeSelectorProps {
	/** Currently selected service type. */
	selectedType: "Premium" | "Standard";
	/** Callback function to handle service type selection. */
	onSelect: (type: "Premium" | "Standard") => void;
}

/** Props for a component displaying ambulance availability */
interface AmbulanceAvailabilityProps {
	ambulances: Ambulance[];
	hospitalId: string;
	onAmbulanceSelect: (ambulanceId: string) => void;
}

/** Props for a component to manage user profile */
interface UserProfileProps {
	user: User;
	updateUser: (updatedUser: Partial<User>) => Promise<void>;
}

/** Props for a component displaying a map */
interface MapComponentProps {
	hospitals: Hospital[];
	userLocation: { latitude: number; longitude: number };
}

/** Props for a component displaying a booking confirmation */
interface BookingConfirmationProps {
	booking: Booking;
}

interface OpenStreetMapProps {
	mapType: "hospital" | "ambulance";
	hospitals: Hospital[]; // Added hospitals property
	selectedHospital?: string | null; // Added optional selectedHospital
	userLocation?: L.LatLng | null | number | [number, number]; // Correct type for user location
	onHospitalSelect?: (hospitalId: string) => void; // Add optional callback
}
